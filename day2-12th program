#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

#define NUM_PHILOSOPHERS 5
#define NUM_EATING 3

pthread_mutex_t chopsticks[NUM_PHILOSOPHERS];
pthread_t philosophers[NUM_PHILOSOPHERS];

void *philosopher(void *arg) {
    int id = *(int *)arg;
    int left = id, right = (id + 1) % NUM_PHILOSOPHERS;

    for (int i = 0; i < NUM_EATING; ++i) {
        usleep(rand() % 1000000); // Thinking

        pthread_mutex_lock(&chopsticks[left]);
        pthread_mutex_lock(&chopsticks[right]);

        usleep(rand() % 1000000); // Eating

        pthread_mutex_unlock(&chopsticks[left]);
        pthread_mutex_unlock(&chopsticks[right]);
    }
    return NULL;
}

int main() {
    srand(time(NULL));
    for (int i = 0; i < NUM_PHILOSOPHERS; ++i) pthread_mutex_init(&chopsticks[i], NULL);
    int ids[NUM_PHILOSOPHERS];
    for (int i = 0; i < NUM_PHILOSOPHERS; ++i) {
        ids[i] = i;
        pthread_create(&philosophers[i], NULL, philosopher, &ids[i]);
    }
    for (int i = 0; i < NUM_PHILOSOPHERS; ++i) pthread_join(philosophers[i], NULL);
    for (int i = 0; i < NUM_PHILOSOPHERS; ++i) pthread_mutex_destroy(&chopsticks[i]);
    return 0;
}
